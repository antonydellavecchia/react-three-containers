{"version":3,"sources":["objects/AudioObject.js","shaders/VertexShader.glsl","utils/audio-handler.js","shaders/BassShader.glsl","utils/vector-functions.js","objects/VectorField.js","vector-fields.js","objects/Model.js","camera-configs.js","objects/CameraGroup.js","objects/Scene.js","functions/container.js","functions/actions.js","shaders/AudioVertexShader.glsl","shaders/GridShader.glsl","index.js"],"names":["AudioObject","url","stepSize","play","console","log","mediaElement","pause","animate","analyser","getFrequencyData","uniforms","time","value","tAudioData","needsUpdate","this","Audio","listener","THREE","audio","hasPlaybackControl","setMediaElementSource","data","fftSize","audioMesh","geometry","vertexShader","VertexShader","fragmentShader","transparent","opacity","side","audioMaterial","dist","pos1","x","y","z","pos2","Math","sqrt","Object","keys","reduce","acc","key","pow","zeroMap","position","VectorField","name","radius","argument","cos","asin","getConfig","Model","vectorFieldConfig","vectorField","mesh","set","curr","next","flow","map","i","angle","PI","sin","CameraGroup","focus","directions","config","positions","direction","number","initialFocus","finalFocus","point","resetFocus","length","Scene","width","height","models","scene","camera","renderer","antialias","setClearColor","setSize","model","cameraGroup","step","activePosition","lookAt","up","cameraAnimate","forEach","render","switch","objects","object","add","initMesh","aspect","updateProjectionMatrix","renderScene","AudioContext","React","createContext","AudioProvider","reducer","initialState","children","useReducer","state","actions","dispatch","loadAudio","a","type","payload","useActions","Provider","loading","action","Container","useContext","mount","useRef","useState","points","setPoints","isAnimating","setAnimating","controls","useEffect","frameId","current","clientWidth","clientHeight","index","push","loadAudioObject","then","loadMeshes","handleResize","window","requestAnimationFrame","stop","cancelAnimationFrame","appendChild","domElement","addEventListener","start","removeEventListener","className","ref","onClick","AudioContainer"],"mappings":"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","file":"static/js/main.e9c6aba2.chunk.js","sourcesContent":["import * as THREE from 'three'\nexport default class AudioObject {\n  constructor({url, stepSize = 0.01}) {\n    let fftSize = 128;\n    this.mediaElement = new Audio(url);\n    //mediaElement.playbackRate = playbackRate\n    let listener = new THREE.AudioListener();\n    this.stepSize = stepSize\n    this.audio = new THREE.Audio(listener);\n    this.audio.hasPlaybackControl = true\n    this.audio.setMediaElementSource(this.mediaElement)\n    this.analyser = new THREE.AudioAnalyser( this.audio, fftSize );\n    this.uniforms = {\n      time: {\n        value: 0\n      },\n      tAudioData: {\n        value: new THREE.DataTexture(\n          this.analyser.data,\n          fftSize / 2,\n          1,\n          THREE.LuminanceFormat\n        )\n      }\n    }\n  }\n  \n  play = () => {\n    console.log('play audio')\n    this.mediaElement.play();\n  }\n\n  pause = () => {\n    console.log('pause mediaElement')\n    this.mediaElement.pause();\n  }\n\n  animate = () => {\n    this.analyser.getFrequencyData()\n    this.uniforms.time.value += this.stepSize\n    this.uniforms.tAudioData.value.needsUpdate = true\n  }\n}\n","export default \"#define GLSLIFY 1\\nvarying vec4 vUv;\\nfloat magnitude(vec3 pos) {\\n  return pow(pow(pos.x, 2.0) + pow(pos.y, 2.0) + pow(pos.z, 2.0), 0.5);\\n}\\nvoid main() {\\n  vUv = vec4(position, 1.0);\\n  vec4 modelViewPosition = modelViewMatrix * vec4(position, 1.0);\\n  gl_Position = projectionMatrix * modelViewPosition;\\n}\\n\"","import * as THREE from  'three'\nimport VertexShader from '../shaders/VertexShader.glsl'\nimport BassShader from '../shaders/BassShader.glsl'\nimport RedShader from '../shaders/RedShader.glsl'\n\nexport const audioMaterial = ({uniforms = null, vertexShader, fragmentShader}) => {\n  console.log('uniforms', uniforms)\n  return new THREE.ShaderMaterial( {\n    uniforms: uniforms,\n    vertexShader: vertexShader,\n    fragmentShader: fragmentShader,\n    transparent: true,\n    opacity: 0.5,\n    side: THREE.DoubleSide\n  });\n}\n\nexport const audioMesh = ({geometry = new THREE.PlaneGeometry(10,10,10),\n                           uniforms = null,\n                           vertexShader = VertexShader,\n                           fragmentShader = BassShader\n                          }) => {\n\n  return new THREE.Mesh(\n    geometry,\n    audioMaterial({uniforms: uniforms, vertexShader, fragmentShader})\n  )\n}\n\n\n","export default \"#define GLSLIFY 1\\nuniform sampler2D tAudioData;\\nvarying vec4 vUv;\\nfloat rand(vec2 co){\\n  return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\\n}\\nvoid main() {\\n  float random1 = rand(vec2(vUv.x, vUv.y));\\n  float random2 = rand(vec2(vUv.x, vUv.z));\\n  float M_PI = 3.1415926535897932384626433832795;\\n  float f =  texture2D( tAudioData, vec2( 0.5 + 0.5 * sin(M_PI * vUv.x) * cos(2.0 * M_PI * vUv.y), 0.0) ).g;\\n  //float f = texture2D( tAudioData, vec2((random1 * abs(vUv.x) * random2 * abs(vUv.y)), 0.0 ) ).g;\\n  float radius = 0.5;\\n  //vec3 backgroundColor = vec3( min(vUv.y, f), min(radius, f), min((f / 10.0), 0.1) );\\n  //vec3 backgroundColor = vec3( min(abs(vUv.y), 1.0), f, min((f / 10.0), 0.1) );\\n  //vec3 backgroundColor = vec3( (vUv.z), 1.0), min(1.0 - abs(vUv.z), random1) * f, 0.0 );\\n  vec3 backgroundColor = vec3(abs(vUv.x) / length(vUv.xyz), abs(vUv.y) / length(vUv.xyz) , abs(vUv.z) / length(vUv.xyz));\\n  float red  = min(vUv.y / 4.0, 1.0);\\n  vec3 color = vec3( red, sin(f), cos(f));\\n  float i = step(radius, f) * step(radius, f - 0.5);\\n  //gl_FragColor = vec4( mix(color, backgroundColor, i), 1.0 );\\n\\n  gl_FragColor = vec4(backgroundColor, 0.0);\\n  //gl_FragColor = vec4(vec3(1,0,0), 1.0);\\n  gl_FragColor.a = f;\\n}\\n\"","export const dist = ({pos1 = {x: 0, y:0, z:0}, pos2 = {x: 0, y:0, z:0}}) => {\n  //console.log(pos1, pos2)\n  return Math.sqrt(\n    Object.keys(pos1).reduce((acc, key) => {\n      return acc + Math.pow(pos1[key] - pos2[key], 2)\n    }, 0)\n  )\n}\n\nexport const zeroMap = (position) => 0\n","import getConfig from '../vector-fields'\nimport { zeroMap } from '../utils/vector-functions'\n\nexport default class VectorField {\n  constructor(name) {\n    // defaults to null vector field\n    const {x = zeroMap, y = zeroMap, z= zeroMap} = getConfig(name)\n    this.x = x\n    this.y = y\n    this.z = z\n  }\n\n  flow ({position, stepSize = 0.01}) {\n    return {\n      x: position.x + this.x(position) * stepSize,\n      y: position.y + this.y(position) * stepSize,\n      z: position.z + this.z(position) * stepSize\n    }\n  }\n}\n","import { dist, zeroMap } from './utils/vector-functions'\n\nexport default function getConfig(name) {\n  switch(name) {\n  case \"CIRCLEXY_SINEZ\":\n    return {\n      x: (position) => - position.y,\n      y: (position) => position.x,\n      z: (position) => {\n        let radius = dist({pos1: position})\n        let argument = position.y / radius\n        let externalDerivative = Math.cos(Math.asin(argument)) / (Math.sqrt(1 - Math.pow(argument, 2)))\n        let derivative = externalDerivative * position.x\n\n        return derivative\n      }\n    }\n\n  case \"CIRCLEXZ\":\n    return {\n      x: (position) => position.z,\n      z: (position) => - position.x\n    }\n\n\n  case \"RANDOM\":\n    return {\n      x: (position) => position.x * position.z,\n      y: (position) => - position.z,\n      z: (position) => - position.z\n    }\n\n  case \"LORENZ\":\n    let sigma = 10\n    let beta = 8 / 3\n    let rho = 28\n\n    return {\n      x: (position) => rho * (position.y - position.x),\n      y: (position) => position.x * (rho - position.z) - position.y,\n      z: (position) => position.x * position.y - beta * position.z\n    }\n\n  default:\n    return {\n      x: zeroMap, \n      y: zeroMap, \n      z: zeroMap\n    }\n  }\n}\n\n","import * as THREE from 'three'\nimport AudioVertexShader from '../shaders/AudioVertexShader.glsl'\nimport VertexShader from '../shaders/VertexShader.glsl'\nimport { audioMesh } from '../utils'\nimport VectorField from './VectorField'\n\nexport default class Model {\n  constructor({\n    geometry,\n    name,\n    position = {x:0, y:0, z:0},\n    vertexShader = VertexShader,\n    fragmentShader,\n    vectorFieldConfig\n  }) {\n    this.geometry = geometry\n    this.name = name\n    this.position = position\n    this.vertexShader = vertexShader\n    this.fragmentShader = fragmentShader\n    this.vectorField = new VectorField(vectorFieldConfig)\n  }\n\n  initMesh(uniforms) {\n    let mesh = audioMesh({\n      uniforms,\n      geometry: this.geometry,\n      vertexShader: this.vertexShader,\n      fragmentShader: this.fragmentShader\n    })\n\n    mesh.name = this.name\n    mesh.position.set(\n      this.position.x,\n      this.position.y,\n      this.position.z\n    )\n\n    this.mesh = mesh\n    return mesh\n  }\n\n  animate(stepSize) {\n    let curr = this.mesh.position\n    let next = this.vectorField.flow({position: curr, stepSize})\n    this.mesh.position.set(\n      next.x,\n      next.y,\n      next.z\n    )\n  }\n}\n","export default function getConfig(name = '') {\n  switch(name){\n  case \"SQUARE\":\n    return [0, 1, 2, 3].map(i => {\n      let angle = Math.PI * 2 * i / 4\n      return {\n        x: Math.cos(angle),\n        y: Math.sin(angle),\n        z: 0\n      }\n    })\n\n  case \"SQUARE_SUSPENSION\":\n    return [0, 1, 2, 3, 4, 5].map(i => {\n      return {\n        x: i % 3 == 0 ? Math.pow(-1, i % 2) : 0,\n        y: i % 3 == 1 ? Math.pow(-1, i % 2) : 0,\n        z: i % 3 == 2 ? Math.pow(-1, i % 2) : 0\n      }\n    })\n\n  default:\n    return {\n      x: 0,\n      y: 0,\n      z: 5\n    }\n  }\n}\n","import getConfig from '../camera-configs'\nimport VectorField from './VectorField'\n\nexport default class CameraGroup {\n  constructor({name, focus = {x: 0, y:0, z:0}, vectorField}, dist = 5) {\n    // defaults to null vector field\n    let directions = getConfig(name)\n    this.config = name\n    this.dist = dist\n    this.positions = directions.map(direction => {\n      return {\n        x: dist * direction.x + focus.x,\n        y: dist * direction.y + focus.y,\n        z: dist * direction.z + focus.z\n      }\n    })\n    this.focus = focus\n    this.number = 0\n    this.vectorField = new VectorField(vectorField)\n    console.log(this.positions)\n  }\n\n  flow(stepSize) {\n    let initialFocus = this.focus\n    let finalFocus = this.vectorField.flow({position: initialFocus, stepSize})\n\n    this.positions = this.positions.map(position => {\n      return {\n        x: position.x + finalFocus.x - initialFocus.x,\n        y: position.y + finalFocus.y - initialFocus.y,\n        z: position.z + finalFocus.z - initialFocus.z\n      }\n    })\n\n    this.focus = finalFocus\n  }\n\n  resetFocus(point) {\n    let directions = getConfig(this.config)\n    this.positions = directions.map(direction => {\n      return {\n        x: this.dist * direction.x + point.x,\n        y: this.dist * direction.y + point.y,\n        z: this.dist * direction.z + point.z\n      }\n    })\n    this.focus = point\n  }\n\n  follow(point, vectorField) {\n    this.resetFocus(point)\n    this.vectorField = vectorField\n  }\n  \n  activePosition() {\n    return this.positions[this.number]\n  }\n\n  switch(number) {\n    this.number = number\n  }\n\n  next() {\n    this.number = (this.number + 1) % this.positions.length\n  }\n\n  setVectorField(vectorField) {\n    this.vectorField = vectorField\n  }\n}\n","import * as THREE from  'three'\nimport BassShader from '../shaders/BassShader.glsl'\nimport GuitarShader from '../shaders/GuitarShader.glsl'\nimport AudioVertexShader from '../shaders/AudioVertexShader.glsl'\nimport AudioObject from './AudioObject'\nimport Model from './Model'\nimport VectorField from './VectorField'\nimport CameraGroup from './CameraGroup'\n              \nexport default class Scene {\n  constructor({width, height, models}) {\n    this.scene = new THREE.Scene()\n    this.camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000)\n    this.renderer = new THREE.WebGLRenderer({ antialias: true })\n    this.renderer.setClearColor('#000000')\n    this.renderer.setSize(width, height)\n    this.models = models.map(model => new Model(model))\n    this.cameraGroup = new CameraGroup({name: \"SQUARE_SUSPENSION\", focus: {x: 0, y: -10, z:0}}, 30)\n    this.step = 0\n    console.log(this.scene)\n\n\n  }\n\n  cameraAnimate(stepSize) {\n    const {x, y, z} = this.cameraGroup.activePosition()\n    this.camera.position.z = z\n    this.camera.position.x = x\n    this.camera.position.y = y\n    \n    this.camera.lookAt(\n      this.cameraGroup.focus.x,\n      this.cameraGroup.focus.y,\n      this.cameraGroup.focus.z\n    )\n\n    this.camera.up.set(0, 0, 1)\n    this.cameraGroup.flow(stepSize)\n  }\n  \n  renderScene() {\n    this.cameraAnimate()\n    this.models.forEach(model => model.animate())\n    this.renderer.render(this.scene, this.camera)\n    this.audio.animate()\n\n    if (this.step > 30) {\n      this.cameraGroup.next()\n      this.step = 0\n    }\n\n    else {\n      this.step += 1\n    }\n  }\n\n  play() {\n    this.audio.play()\n    this.cameraGroup.switch(2)\n    //this.cameraGroup.follow(\n    //  this.models[0].mesh.position,\n    //  this.models[0].vectorField\n    //)\n  }\n\n  pause() {\n    this.audio.pause()\n  }\n\n  add(objects) {\n    console.log('adding objects')\n    objects.forEach(object => {\n      this.scene.add(object)\n    })\n  }\n\n  async loadAudioObject(url) {\n    this.audio = new AudioObject(url)\n    console.log(this.audio, 'audio')\n\n    return this.audio\n  }\n\n  loadMeshes(uniforms) {\n    this.models.forEach(model => {\n      let mesh = model.initMesh(uniforms)\n      this.scene.add(mesh)\n    })\n  }\n  \n  handleResize(width, height) {\n    this.renderer.setSize(width, height)\n    this.camera.aspect = width / height\n    this.camera.updateProjectionMatrix()\n    this.renderScene()\n  }\n}\n","import React, { useRef, useEffect, useState, useContext, useReducer } from 'react'\nimport * as THREE from 'three'\nimport BassShader from '../shaders/BassShader.glsl'\nimport GuitarShader from '../shaders/GuitarShader.glsl'\nimport AudioVertexShader from '../shaders/AudioVertexShader.glsl'\nimport GridShader from '../shaders/GridShader.glsl'\nimport { useActions } from '../functions/actions'\nimport Scene from '../objects/Scene'\n\nconst AudioContext = React.createContext()\nconst AudioProvider = ({reducer, initialState, children}) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n  const actions = useActions(state, dispatch)\n  const value = {\n    state: state,\n    actions: actions\n  }\n  \n  return(\n    <AudioContext.Provider value={value} >\n      { children }\n    </AudioContext.Provider>\n  )\n}\n\nconst initialState = {\n  loading: true\n}\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n  case \"SET_LOADING\":\n    return {\n      ...state,\n      loading: action.payload\n    }\n  }\n}\n\nexport const Container = ({url}) => {\n  console.log('container')\n  const {state, actions} = useContext(AudioContext)\n  const mount = useRef(null)\n  const [points, setPoints] = useState(null)\n  const [isAnimating, setAnimating] = useState(false)\n  const controls = useRef(null)\n  \n  useEffect(() => {\n    const loadData = (data) => setPoints(data.points)\n    loadData({\n      points: [{\n        x: 0,\n        y: 0,\n        z: 0\n      }]\n    })\n  }, [])\n  \n  useEffect(() => {\n    console.log(points)\n    if (!points) return\n    \n    // initate scene\n    let width = mount.current.clientWidth\n    let height = mount.current.clientHeight\n    let frameId\n    let models = points.map((point, index) => {\n      return {\n        geometry: new THREE.SphereGeometry(100, 10, 6),\n        name: `disco-ball-${index}`,\n        position: point,\n        vectorFieldConfig: \"LORENZ\"\n      }\n    })\n\n    models.push({\n      geometry: new THREE.PlaneGeometry(50, 50, 50),\n      name: 'floor',\n      position: {x: 0, y:0, z: -10},\n      vertexShader: AudioVertexShader,\n      fragmentShader: GridShader\n    })\n    \n    let scene = new Scene({\n      width,\n      height,\n      models: models\n    })\n\n    console.log('url', url)\n    scene.loadAudioObject({url: url}).then(({uniforms}) => {\n      scene.loadMeshes(uniforms)\n    })\n    \n    const handleResize = () => {\n      scene.handleResize(mount.current.clientWidth, mount.current.clientHeight)\n    }\n      \n    const animate = () => {\n      scene.renderScene()\n      frameId = window.requestAnimationFrame(animate)\n    }\n\n    const start = () => {\n      if (!frameId) {\n        scene.play()\n        frameId = requestAnimationFrame(animate)\n      }\n    }\n\n    const stop = () => {\n      cancelAnimationFrame(frameId)\n      scene.pause()\n      frameId = null\n    }\n\n    mount.current.appendChild(scene.renderer.domElement)\n    window.addEventListener('resize', handleResize)\n    //start()\n\n    controls.current = { start, stop }\n      \n    return () => {\n      stop()\n      window.removeEventListener('resize', handleResize)\n      //mount.current.removeChild(renderer.domElement)\n\n      //scene.remove(cube)\n      //geometry.dispose()\n      //material.dispose()\n    }\n  }, [points])\n\n  useEffect(() => {\n    //console.log(state)\n  }, [])\n\n  useEffect(() => {\n    try {\n      if (isAnimating) {\n        controls.current.start()\n      } else {\n        controls.current.stop()\n      }\n    }\n\n    catch {\n      console.log('waiyting for media')\n    }\n  }, [isAnimating])\n  \n  return <div className=\"container\" ref={mount} onClick={() => setAnimating(!isAnimating)} />\n}\n\nexport const AudioContainer = ({url}) => {\n  return (\n    <AudioProvider initialState={initialState} reducer={reducer}>\n      <Container url={url}/>\n    </AudioProvider>\n  )\n}\n\n\n\n\n\n","import * as THREE from 'three'\n\nexport const useActions = (state, dispatch) => {\n  const loadAudio = async (mediaElement, fftSize) => {\n    console.log(mediaElement)\n    let listener = new THREE.AudioListener();\n    let audio = new THREE.Audio( listener );\n    let analyser = new THREE.AudioAnalyser( audio, fftSize )\n    await audio.setMediaElementSource(mediaElement);\n\n    dispatch({\n      type: \"SET_MEDIA\",\n      payload: mediaElement\n    })\n    \n    dispatch({\n      type: \"SET_ANALYSER\",\n      payload: analyser\n    })\n    \n    dispatch({\n      type: \"SET_UNIFORMS\",\n      payload: {\n        tAudioData: {\n          value: new THREE.DataTexture(\n            analyser.data,\n            fftSize / 2,\n            1,\n            THREE.LuminanceFormat\n          )\n        }\n      }\n    })\n  }\n\n  const animate = () => {\n    state.analyser.getFrequencyData()\n    state.uniforms.tAudioData.value.needsUpdate = true\n  }\n\n  return {\n    loadAudio,\n    animate\n  }\n}\n","export default \"#define GLSLIFY 1\\nvarying vec4 vUv;\\nuniform sampler2D tAudioData;\\nvarying vec3 newPosition;\\n\\nfloat rand(vec2 co){\\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\\n}\\n\\nvoid main() {\\n  float dist = distance(position, vec3(0,0, position.z));\\n  float f1 = texture2D(tAudioData, vec2(position.y, position.x)).g;\\n  float f2 = texture2D(tAudioData, vec2(position.x, position.y)).g;\\n  float M_PI = 3.1415926535897932384626433832795;\\n  //float f =  texture2D( tAudioData, vec2( 0.5 + 0.5 * sin(M_PI * position.x) * cos(2.0 * M_PI * position.y), 0.0) ).g;\\n\\t\\t      \\n  newPosition = vec3(position.x, position.y, 5.0* step(f1,rand(position.xy)));\\n  //vUv = vec4(position.x, position.y, 10.0 * sin(2.0 * position.x), 1.0);\\n  vUv = vec4(position, 1.0);\\n  \\n  vec4 modelViewPosition = modelViewMatrix * vec4(newPosition, 1.0);\\n  gl_Position = projectionMatrix * modelViewPosition;\\n}\\n\"","export default \"#define GLSLIFY 1\\nvarying vec4 vUv;\\nuniform vec4 params;\\nuniform float time;\\n\\n// adapted from https://thebookofshaders.com/edit.php#10/ikeda-simple-grid.frag\\n \\nfloat grid(vec2 st, float res)\\n{\\n  float motion = fract(time);\\n  vec2 grid = fract(st*res);\\n  return (step(res, grid.x) * step(res, grid.y));\\n}\\n \\nvoid main()\\n{\\n  vec2 grid_uv = vec2(vUv.x * 0.5, vUv.y * 0.5 + fract(time) * 10.0); //params.x; // scale\\n  float x = grid(grid_uv, 0.2);//params.y); // resolution\\n  gl_FragColor.rgb = vec3(0.5, 0.4, 0.1) * (1.0 - x);  \\n  gl_FragColor.a = 1.0;\\n} \\n\"","export * from './functions'\n"],"sourceRoot":""}